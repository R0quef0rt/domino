exit
(def ritems (ref #{}))
(def ritems (ref (set (range 1000000)))
(def items (ref (set (range 10000000))))
(count @items)
(time (loop [] (dosync (let [[x & xs] @items] (ref-set items xs))) (when (not-empty @items) (recur))))
(def items (java.util.concurrent.ConcurrentSkipListSet.))
(time (doseq [i (range 10000)] (.add items i)))
(def items (java.util.concurrent.ConcurrentSkipListSet.))
(time (doseq [i (range 1000000)] (.add items i)))
(time (dotimes [i (count items)] (.pollFirst items)))
(import '[java.util.concurrent ConcurrentLinkedDeque])
(def cpool (ConcurrentLinkedDeque.))
(.addAll cpool (into [] (range 1000000)))
(time (dotimes [i (count cpool)] (.pop ^ConcurrentLinkedDeque cpool)))
